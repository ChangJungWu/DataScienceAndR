- Class: meta
  Course: DataScienceAndR
  Lesson: 01-RBasic-03-Data-Structure-Object
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 1.0
- Class: text
  Output: 在R 中，我們操作的所有變數，都是一種R 物件(Object)。 這一堂課程中，就是要簡介R 的物件結構。
- Class: text
  Output: 在所有物件中，最基礎的「原子」物件，就是在上一堂課中介紹的各種向量。 其他的物件都是有這些原子物件組合而成。
- Class: text
  Output: 這些向量物件有兩個很重要的屬性：`mode`和`length`。 `mode`代表這個向量的值型態，總共有：`logical`、`integer`、`numeric`、`complex`、`character`和`raw`。
    `length`代表這個向量的值的個數。
- Class: cmd_question
  Output: 同學可以用`mode`和`length`這個函數來查詢一個向量的型態和長度。 請同學試試看：`mode(x)`
  CorrectAnswer: mode(x)
  AnswerTests: omnitest('mode(x)', "numeric")
  Hint: mode(x)
- Class: mult_question
  Output: 請問x 的型態是？
  AnswerChoices: logical;integer;numeric;complex;character;raw
  CorrectAnswer: numeric
  AnswerTests: omnitest(correctVal = 'numeric')
  Hint: 請參考`mode(x)`的輸出
- Class: cmd_question
  Output: 接著，請試試看`length(x)`
  CorrectAnswer: length(x)
  AnswerTests: omnitest('length(x)', 5L)
  Hint: length(x)
- Class: mult_question
  Output: 請問x 的長度是？
  AnswerChoices: 1;2;3;4;5;6
  CorrectAnswer: 5
  AnswerTests: omnitest(correctVal = '5')
  Hint: 請參考`length(x)`的輸出
- Class: text
  Output: R 也可以建立一種叫做`list`的向量，這是「R 物件」的向量。換句話說，每一個值 都是R 物件，都有自己的`mode`、`length`等屬性。我們會在一些複雜的統計模型中，見到這樣的
    資料型態。舉例來說，在R 中如果要建立一個迴歸模型，會使用：`g <- lm(dist ~ speed, cars)` 這樣的程式碼會利用車速當解釋變數、煞車距離當應變數，建立一個迴歸模型。
    這裡我們先不管`lm`怎麼用，而是要看看`g`這個物件的結構。同學只要掌握這個課程的內容， 未來就可以輕鬆的探索各種機器學習或統計分析演算法的輸出結果。
- Class: cmd_question
  Output: 請同學檢查`g`的型態
  CorrectAnswer: mode(g)
  AnswerTests: omnitest('mode(g)', mode(g))
  Hint: mode(g)
- Class: cmd_question
  Output: 請同學檢查`g`的長度
  CorrectAnswer: length(g)
  AnswerTests: omnitest('length(g)', length(g))
  Hint: length(g)
- Class: cmd_question
  Output: 在上一個章節中，我們有介紹可以使用如`g[1:2]`的方式來拿出`g`的第一個到第二個值。 而這樣的輸出結果，還是會和`g`有同樣的`mode`。這裡請同學看看`g[1:2]`的結果。
  CorrectAnswer: g[1:2]
  AnswerTests: omnitest('g[1:2]', g[1:2])
  Hint: g[1:2]
- Class: text
  Output: 同學會在R console看到一些數字與其妙的文字。在最上面的`$coefficients`，表示 `g[1:2]`這個向量的第一個值（同時也是`g`的第一個值），是有名字的。他的名字是：`"coefficients"`。
    接著，由於`g[1:2]`的第一個值是一個有名字的numeric 向量，所以R 就把這個向量所有的名字和值 一起顯示在console。也就是說，這個numeric
    向量的第一個值是-17.579095，而名字是`"(Intercept)"`。 第二個值是3.932409，而名字是`"speed"`。
- Class: text
  Output: 接著，`$residuals`表示`g[1:2]`的第二個值也是有名字的，而且它的名字是`"residuals"`。由於 這個值也是一個有名字的numeric
    向量，所以R 就把值和名字同時顯示到console上。所以我們就 可以知道，這個numeric 向量的第一個值的名字是`"1"`，值是3.849460。以此類推。
- Class: text
  Output: 然而整個R Console的顯示告訴我們`g[1:2]`仍然是一個list，因為R 只有在顯示list的內容 才會帶有`$coefficients`和`$residuals`這種標記。如果只是一個numeric
    向量，就不會顯示出 `$coefficients`和`$residuals`。
- Class: cmd_question
  Output: 請同學輸入`list(1, a = 2)`來看看R 是如何顯示list，以及比較當值有附帶名字，或是沒有 附帶名字時，輸出的不同。
  CorrectAnswer: list(1, a = 2)
  AnswerTests: omnitest('list(1, a = 2)')
  Hint: list(1, a = 2)
- Class: text
  Output: 在一開始，R 顯示了`[[1]]`，然後才顯示一個值為1 的numeric 向量。開頭的`[[1]]`不只 說明了這個物件是一個list，也說明接下來顯示的是第一個值的內容。
- Class: text
  Output: 接著，R 顯示了`$a`，後才顯示了一個值為2 的numeric 向量。開頭的`$a`因為位置在第二， 所以代表這是這個list物件的第二個值。同時，這個值的名字是`"a"`。
- Class: cmd_question
  Output: 但是如果我們想拿出，`g`的第一個值，並且是這個物件的本身，而非被包在一個list中， 我們需要用：`g[[1]]`。請同學試試看。
  CorrectAnswer: g[[1]]
  AnswerTests: omnitest('g[[1]]', g[[1]])
  Hint: g[[1]]
- Class: cmd_question
  Output: 請同學查詢`g[[1]]`的型態
  CorrectAnswer: mode(g[[1]])
  AnswerTests: omnitest('mode(g[[1]])', mode(g[[1]]))
  Hint: mode(g[[1]])
- Class: cmd_question
  Output: 請同學查詢`g[[1]]`的長度
  CorrectAnswer: length(g[[1]])
  AnswerTests: omnitest('length(g[[1]])', length(g[[1]]))
  Hint: length(g[[1]])
- Class: text
  Output: 這裡再解釋一次`g[1]`和`g[[1]]`的差異。使用`g[1]`時，R 取出向量的第一個元素，並且維持list的結構， 所以`g[1]`的結果還仍是list。使用`g[[1]]`時，R
    會打破list的結構，再取出向量的第一個元素，所以`g[[1]]`的 型態會是存放在list裡面的R 物件的型態。 所以在上述的例子中，`g[1]`的型態是list，而`g[[1]]`的型態就是numeric。這是因為g
    這個list的第一個存放 的R 物件是numeric向量。
- Class: text
  Output: 一般來說，對R 物件使用`[]`之後，會取得會和該物件相同的物件。舉例來說，`a[1]`的型態會和`a`一樣。 而`[[]]`就沒有類似的特性了。
- Class: text
  Output: 經過這些練習，相信同學也會理解list這個「R 物件的向量」是什麼意思。 list向量最有用的地方，在於它可以裝不同型態的值。以`g`為範例，雖然它大部分的值的型態都是numeric，
    但是有些物件的型態會是call和list。這讓R 的開發者能更有彈性的建立一些複雜的模型。 同時同學在學會list之後，也更有能力來了解各種R 套件所建立的模型物件。
- Class: cmd_question
  Output: 請同學檢查看看`g[[10]]`的型態
  CorrectAnswer: mode(g[[10]])
  AnswerTests: omnitest('mode(g[[10]])', 'call')
  Hint: mode(g[[10]])
- Class: text
  Output: 這裡的`g[[10]]`其實是記載著產生g 的程式碼。在R 裡面，這樣的程式碼是存成call型態的物件。 我們現在只要知道這是一種call就可以了。至於call是什麼東西，要等到同學需要開始深入的學習R
    的原始碼、運作機制時， 才需要弄懂。我們現在只要知道，list可以裝所有R 的物件就可以了。
- Class: cmd_question
  Output: 另一個我們需要知道的事情，就是可以為list命名。舉例來說，我們除了用`g[[1]]`來取得第一個值之外，也可以用 `g[["coefficients"]]`來取得第一個值。因為`g`這個向量是被命名的，而第一個名字就是`"coefficients"`。請同學試試看。
  CorrectAnswer: g[["coefficients"]]
  AnswerTests: omnitest('g[["coefficients"]]')
  Hint: g[["coefficients"]]
- Class: text
  Output: 適當的命名，可以讓程式碼更易讀。舉例來說，若我們知道`g`是一個迴歸模型，我們也知道迴歸模型通常 就是一個參數向量，那我們就會預期：`g[["coefficients"]]`就是這個迴歸模型的參數。（在統計學課本中，各種模型的參數
    通常稱作："coefficients"。
- Class: cmd_question
  Output: 我們可以更改一個向量的長度。舉例來說，現在x 是一個長度是5 、型態是numeric的向量。我們可以利用：`length(x) <- 10` 把x
    的長度改成10。請同學試試看。
  CorrectAnswer: length(x) <- 10
  AnswerTests: omnitest('length(x) <- 10')
  Hint: length(x) <- 10
- Class: cmd_question
  Output: 現在我們可以來看看x 的值。，請同學輸入：`x`
  CorrectAnswer: x
  AnswerTests: omnitest('x', c(1,2,3,4,5,NA,NA,NA,NA,NA))
  Hint: x
- Class: cmd_question
  Output: 我們也可以直接在x 的指定位置塞入新的值，並且藉此增加x 的長度。舉例來說： `x[7] <- 7`可以讓x 的第7 個位置的值變成7 。請同學試試看。
  CorrectAnswer: x[7] <- 7
  AnswerTests: any_of_exprs('x[7] <- 7', 'x[7] = 7')
  Hint: x[7] <- 7
- Class: cmd_question
  Output: 現在我們可以來看看x 的值。，請同學輸入：`x`
  CorrectAnswer: x
  AnswerTests: omnitest('x', c(1,2,3,4,5,NA,7,NA,NA,NA))
  Hint: x
- Class: cmd_question
  Output: 由於x 本來的長度就已經超過7 所以並沒有延長。現在我們改程式試試看：`x[13] <- 13`
  CorrectAnswer: x[13] <- 13
  AnswerTests: any_of_exprs('x[13] <- 13', 'x[13] = 13')
  Hint: x[13] <- 13
- Class: cmd_question
  Output: 現在我們可以來看看x 的值。，請同學輸入：`x`
  CorrectAnswer: x
  AnswerTests: omnitest('x', c(1,2,3,4,5,NA,7,NA,NA,NA, NA, NA, 13))
  Hint: x
- Class: cmd_question
  Output: 如果我們要縮短x 的長度，可以運用如：`x2 <- x[c(1,3,5,7,9,11,13)]`，這樣x2就是縮短的x 。 請同學試試看。
  CorrectAnswer: x2 <- x[c(1,3,5,7,9,11,13)]
  AnswerTests: any_of_exprs('x2 <- x[c(1,3,5,7,9,11,13)]', 'x2 = x[c(1,3,5,7,9,11,13)]')
  Hint: x2 <- x[c(1,3,5,7,9,11,13)]
- Class: cmd_question
  Output: 現在我們可以來看看x2的值。，請同學輸入：`x2`
  CorrectAnswer: x2
  AnswerTests: omnitest('x2', c(1,3,5,7,NA,NA,13))
  Hint: x2
- Class: text
  Output: x2只剩下原本在x 奇數位置的值了。 在整理資料時，我們常常需要這樣的技巧，來從資料中選出我們真正要分析的部份，並且將資料調整成我們需要的長度。
- Class: cmd_question
  Output: 所有的R 物件，都有「屬性」(attributes)。我們可以用`attributes`這個函數來印出一個R 物件的屬性。 請同學試試看：`attributes(g)`
  CorrectAnswer: attributes(g)
  AnswerTests: omnitest('attributes(g)')
  Hint: attributes(g)
- Class: mult_question
  Output: 請問同學，根據剛剛的輸出結果，`attributes(g)`的屬性應該是哪一種向量？
  AnswerChoices: numeric;character;list
  CorrectAnswer: list
  AnswerTests: omnitest(correctVal = 'list')
- Class: cmd_question
  Output: 在下一個題目之前，我想請同學先輸入`names(g)`來查詢`g`的名字。並且和`attributes(g)`的結果做比對。
  CorrectAnswer: names(g)
  AnswerTests: omnitest('names(g)')
  Hint: names(g)
- Class: text
  Output: 在剛剛`attributes(g)`的輸出中，同學應該會看到一個帶有名字的list。請同學記得，所有R 物件的attributes都是 帶有名字的list。
- Class: cmd_question
  Output: 通常這個物件的名字，就是`attributes(g)`這個list中，名字為`"names"`的值。而且值一定要是character向量。 在R
    中，我們可以用`attr(g, "names")`來取得名字是"names"的屬性。請同學試試看。
  CorrectAnswer: attr(g, "names")
  AnswerTests: omnitest('attr(g, "names")', names(g))
  Hint: attr(g, "names")
- Class: text
  Output: 上一題的輸出結果，就是g 這個list的名字，也就是`names(g)`的結果。
- Class: cmd_question
  Output: 讓我們回到`attributes(g)`的輸出。除了第一個值是名字為`"names"`的character向量之外，第二個值是一個名字 是`"class"`的character向量。character向量的值是`"lm"`。請同學試試看：`attr(g,
    "class")`
  CorrectAnswer: attr(g, "class")
  AnswerTests: omnitest('attr(g, "class")')
  Hint: attr(g, "class")
- Class: text
  Output: 了解像attributes這樣的功能，在探索一些複雜的R 模型物件時，是非常好用的。我們在之後深入探討`matrix`、`data.frame`
    等進階物件的時候，也會需要了解attributes的相關的知識。現在，同學只要知道所有的R 物件都有attributes就可以了。
- Class: text
  Output: 而名稱為"class"的屬性是非常重要的，因為它牽涉到R 的物件導向設計。這部份請讓我們到更進階的章節再跟同學說明。
- Class: cmd_question
  Output: 由於"names"和"class"這兩個屬性是如此的重要，所以在R 中有設計了`class`和`names`這兩個函數，可以讓使用者很方便的 來修改一個R
    物件的names和class。請同學試試看：`names(g)`
  CorrectAnswer: names(g)
  AnswerTests: omnitest('names(g)')
  Hint: names(g)
- Class: cmd_question
  Output: 再請同學試試看：`class(g)`
  CorrectAnswer: class(g)
  AnswerTests: omnitest('class(g)')
  Hint: class(g)
- Class: text
  Output: 這個課程簡介了R 的物件系統。希望未來同學在接觸到沒學過得套件時，可以有系統得來摸索R 套件的輸出。
- Class: script
  Output: 最後我們請同學用這個課程所學的內容，處理一個PCA 的結果。 請同學在完成之後存檔，並輸入`submit()`來檢查結果是否符合預期。 如果同學在檔案中看到亂碼，請使用Rstudio
    左上角的File -> Reopen With Encoding... -> 選取：UTF-8
  Script: RBasic-03-HW.R
  AnswerTests: rbasic_03_hw_test()

